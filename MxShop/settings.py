"""
Django settings for MxShop project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 将MxShop加入根目录搜索路径之下
sys.path.insert(0, BASE_DIR)

# 将apps和extra_apps加入根目录搜索路径之下
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*n99tviml+51^62kqg75o2+_tau1-4hkul+jpqy1kmbmxc4!0b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 部署到外部服务器上要加上"*"
ALLOWED_HOSTS = ["*"]

# users的models要配置在settings中来
# 将拓展的user替换系统默认的auth_user模型
AUTH_USER_MODEL = 'users.UserProfile'

# Application definition

INSTALLED_APPS = [
    # 美化后台ui
    'simpleui',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',

    # 哪些是自己加进来的要配置到这里
    "DjangoUeditor",
    "goods.apps.GoodsConfig",
    "trade.apps.TradeConfig",
    "user_operation.apps.UserOperationConfig",

    # xadmin要使用的crispy_forms
    'crispy_forms',
    'xadmin',
    'django.contrib.admin',

    # 官方drf的配置
    'rest_framework',

    # 过滤器
    'django_filters',

    # 跨域问题第一步
    'corsheaders',

    # TokenAuthentication的设置，这是要生成表的，凡是要生成表的，都要加到这里
    # 这个也要打开配合jwt使用
    'rest_framework.authtoken'
]

MIDDLEWARE = [
    # 跨域问题第二步
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 中间件经过SessionMiddleware到AuthenticationMiddleware，会返回一个request.user,来判断是否当前用户
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 根据requests里的cookies里面的sessionID转换成我们的user
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# 跨域问题第三步
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'MxShop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MxShop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# 改成mysql的驱动
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "mxshop",
        # 'USER': 'root',
        # 'PASSWORD': '123456',
        # 'HOST': "39.102.98.66",

        'USER': 'tangming',
        'PASSWORD': '130796',
        'HOST': "127.0.0.1",
        # 用storage_engine会出错
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/


# en-us英文
# 设置时区
LANGUAGE_CODE = 'zh-hans'  # 中文支持，django1.8以后支持；1.8以前是zh-cn
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False  # 默认是True，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！

# 一般jwt是从数据库获取用户名和密码来知道是否这个用户
# 但是想要和手机和密码登录呢，那就要设置一下这个，如果里面只有一个参数，记得加一个逗号
# 这样就在users模块里的views写自定义用户验证模块CustomBackend
AUTHENTICATION_BACKENDS = [
    'users.views.CustomBackend',

]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# 商品的图片在xadmin中不显示，而图片放在media中，所以要在这里做一个配置
MEDIA_URL = "/media/"

# 静态文件夹的配置
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# BASE_DIR要设置在MEDIA_ROOT之后，因为django并不知道我们把图片放在media中
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# 所有rest_framework都要写到这个变量里边
# 比如是数据序列化的时候需要一个分页的一个设置
# 在site-packages下的rest_framework下的settings下的
# val = self.defaults[attr]中的self.defaults = defaults or DEFAULTS就能找到DEFAULT_PAGINATION_CLASS
# REST_FRAMEWORK = {
#     """如果在views里面定义了，就可以注释掉这个"""
#     'PAGE_SIZE': 10,
# }


# 这是用来验证用户的登录的
# drf的配置，就算不写，也是默认有这两个的Basic，Session
# BasicAuthentication也不用管它
# SessionAuthentication在前后端分离的项目中是很少见的，就是浏览器自己设置cookies,并将cookies和sessionID带给我们服务器
# TokenAuthentication是重点，要在INSTALLED_APPS设置'rest_framework.authtoken'，这是要生成表的，凡是要生成表的，都要加到INSTALLED_APPS
REST_FRAMEWORK = {
    # 这实际就是生成drf的自动文档的配置
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',

    """这就像是django的MIDDLEWARE,在将我们requests映射到我们views之前，django和drf都 会调用这里面的类的方法"""
    # 用户校验
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',

        # 得到：AnonymousUser, 不加入这个就是个匿名用户，就是说没有取到这个用户，
        # 但是如果加入到这里，那就是全局的，那有一些是公开数据，用户不用登录也能访问的就不能配置在这里
        # 或者说数据本身就要用户登录的情况下才能访问，就在views里写authentication_classes = [TokenAuthentication, ]
        # 'rest_framework.authentication.TokenAuthentication',

        # jwt的配置，什么是jwt，就是把一些用户的信息放在客户端，这样就少了服务器的压力
        # 就是将用户post过来的token进行验证，验证完之后将它的user取出来，跟AuthenticationMiddleware的原理是一样的
        # 如果token过期了，用户在访问goods列表页，这个不用用户登录的页面时候，那就抛出异常，这样我们连商品的列表页面都访问不了，所以一定配置到 具体的views里面来
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ],
    # 这个在API Guide下的Throttling,这是对api的访问频率做一定的限制，比如爬虫
    'DEFAULT_THROTTLE_CLASSES': [
        # 这是用户没有登录的情况下的一个类，
        'rest_framework.throttling.AnonRateThrottle',
        # 这是用户己经登录的情况下的一个类,这是通过session,token来做判断的
        'rest_framework.throttling.UserRateThrottle'
    ],
    # 这是限速规则， second, minute, hour or day
    'DEFAULT_THROTTLE_RATES': {
        # 这是未登录情况下
        'anon': '50/minute',
        # 这是登录情况下
        'user': '100/minute'
    }
}


import datetime
# jwt的全局设置， 一些参数很重要，比如什么时候过期，这里我们设置days=7
JWT_AUTH = {
    # token什么时候过期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    # 显示是Token还是JWT，要与前端保持一致，这里我们保持默认的JWT就行
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}


# 云片网的apikey
APIKEY = '3b4b90283fa8e7caae18876077f7b08b'

# 手机号码正则表达式
REGEX_MOBILE = "^1[358]\d{9}$|^147\d{8}$|^176\d{8}$"

# 支付宝相关配置私钥和阿里keys
private_key_path = os.path.join(BASE_DIR, 'apps/trade/keys/private_2048.txt')
ali_pub_key_path = os.path.join(BASE_DIR, 'apps/trade/keys/alipay_key_2048')

# drf的一个缓存配置，这是设置缓存到内存里能存储多长时间就过期
REST_FRAMEWORK_EXTENSIONS = {
    # 这个参数会影响缓存存储到redis内存的有效时间是多长，如果失效了，那这个key自动在redis-cli删除掉，这里是50秒
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 50
}


# redis缓存的配置,保存一些状态在redis中的key里
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        # 有密码这样写
        # "LOCATION": "redis://:123456@127.0.0.1:6379",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}









